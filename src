import sqlite3
import tkinter as tk
from tkinter import messagebox
import os

# Conexão com o banco de dados SQLite
conn = sqlite3.connect('library.db')
c = conn.cursor()

# Criação das tabelas
c.execute('''
CREATE TABLE IF NOT EXISTS books (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    author TEXT NOT NULL,
    quantity INTEGER NOT NULL,
    publication_year INTEGER
)
''')

c.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL
)
''')

c.execute('''
CREATE TABLE IF NOT EXISTS loans (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    book_id INTEGER,
    user_id INTEGER,
    loan_date TEXT,
    return_date TEXT,
    FOREIGN KEY (book_id) REFERENCES books (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
)
''')

conn.commit()

# Funções para as operações do banco de dados

def insert_book(title, author, quantity, publication_year):
    c.execute("INSERT INTO books (title, author, quantity, publication_year) VALUES (?, ?, ?, ?)", (title, author, quantity, publication_year))
    conn.commit()

def insert_user(name):
    c.execute("INSERT INTO users (name) VALUES (?)", (name,))
    conn.commit()

def insert_loan(book_id, user_id, loan_date):
    c.execute("INSERT INTO loans (book_id, user_id, loan_date) VALUES (?, ?, ?)", (book_id, user_id, loan_date))
    conn.commit()

def update_return_date(loan_id, return_date):
    c.execute("UPDATE loans SET return_date = ? WHERE id = ?", (return_date, loan_id))
    conn.commit()

def delete_books(book_id, quantity):
    c.execute("UPDATE books SET quantity = quantity - ? WHERE id = ?", (quantity, book_id))
    conn.commit()

def list_books():
    c.execute("SELECT * FROM books")
    books = c.fetchall()
    result = "\n".join([f"ID: {b[0]}, Título: {b[1]}, Autor: {b[2]}, Quantidade: {b[3]}, Ano: {b[4]}" for b in books])
    messagebox.showinfo("Livros", result if result else "Nenhum livro encontrado.")

def list_users():
    c.execute("SELECT * FROM users")
    users = c.fetchall()
    result = "\n".join([f"ID: {u[0]}, Nome: {u[1]}" for u in users])
    messagebox.showinfo("Usuários", result if result else "Nenhum usuário encontrado.")

# Nova função para listar livros emprestados
def list_loans():
    c.execute('''
    SELECT loans.id, books.title, users.name, loans.loan_date, loans.return_date 
    FROM loans 
    JOIN books ON loans.book_id = books.id 
    JOIN users ON loans.user_id = users.id
    ''')
    loans = c.fetchall()
    result = "\n".join([f"ID: {l[0]}, Livro: {l[1]}, Usuário: {l[2]}, Data de Empréstimo: {l[3]}, Data de Devolução: {l[4] or 'Não devolvido'}" for l in loans])
    messagebox.showinfo("Empréstimos", result if result else "Nenhum empréstimo encontrado.")

# Funções para a interface gráfica
def insert_book_gui():
    title = entry_book_title.get()
    author = entry_book_author.get()
    quantity = entry_book_quantity.get()
    publication_year = entry_book_year.get()
    insert_book(title, author, quantity, publication_year)
    messagebox.showinfo("Sucesso", "Livro adicionado com sucesso!")

def insert_user_gui():
    name = entry_user_name.get()
    insert_user(name)
    messagebox.showinfo("Sucesso", "Usuário adicionado com sucesso!")

def insert_loan_gui():
    book_id = entry_loan_book_id.get()
    user_id = entry_loan_user_id.get()
    loan_date = entry_loan_date.get()
    insert_loan(book_id, user_id, loan_date)
    messagebox.showinfo("Sucesso", "Empréstimo realizado com sucesso!")

def update_return_date_gui():
    loan_id = entry_loan_id.get()
    return_date = entry_return_date.get()
    update_return_date(loan_id, return_date)
    messagebox.showinfo("Sucesso", "Data de devolução atualizada com sucesso!")

def delete_books_gui():
    book_id = entry_delete_book_id.get()
    quantity = entry_quantity_to_delete.get()
    delete_books(book_id, quantity)
    messagebox.showinfo("Sucesso", "Exemplares excluídos com sucesso!")

def search_book_gui():
    book_id = entry_search_book_id.get()
    c.execute("SELECT * FROM books WHERE id = ?", (book_id,))
    book = c.fetchone()
    if book:
        messagebox.showinfo("Livro Encontrado", f"ID: {book[0]}, Título: {book[1]}, Autor: {book[2]}, Quantidade: {book[3]}, Ano: {book[4]}")
    else:
        messagebox.showerror("Erro", "Livro não encontrado.")

def search_user_gui():
    user_id = entry_search_user_id.get()
    c.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    user = c.fetchone()
    if user:
        messagebox.showinfo("Usuário Encontrado", f"ID: {user[0]}, Nome: {user[1]}")
    else:
        messagebox.showerror("Erro", "Usuário não encontrado.")

# Verifica se o ambiente suporta GUI antes de iniciar
if os.environ.get('DISPLAY') is not None or os.name == 'nt':
    # Interface gráfica
    root = tk.Tk()
    root.title("Sistema de Gerenciamento de Biblioteca")

    frame = tk.Frame(root)
    frame.pack(padx=10, pady=10)

    # Labels e Entradas para Livros
    lbl_book_title = tk.Label(frame, text="Título do Livro")
    lbl_book_title.grid(row=0, column=0)
    entry_book_title = tk.Entry(frame)
    entry_book_title.grid(row=0, column=1)

    lbl_book_author = tk.Label(frame, text="Autor do Livro")
    lbl_book_author.grid(row=1, column=0)
    entry_book_author = tk.Entry(frame)
    entry_book_author.grid(row=1, column=1)

    lbl_book_quantity = tk.Label(frame, text="Quantidade")
    lbl_book_quantity.grid(row=2, column=0)
    entry_book_quantity = tk.Entry(frame)
    entry_book_quantity.grid(row=2, column=1)

    lbl_book_year = tk.Label(frame, text="Ano de Publicação")
    lbl_book_year.grid(row=3, column=0)
    entry_book_year = tk.Entry(frame)
    entry_book_year.grid(row=3, column=1)

    btn_insert_book = tk.Button(frame, text="Adicionar Livro", command=insert_book_gui)
    btn_insert_book.grid(row=4, column=1)

    # Botão para Listar Livros
    btn_list_books = tk.Button(frame, text="Listar Livros", command=list_books)
    btn_list_books.grid(row=5, column=1)

    # Labels e Entradas para Usuários
    lbl_user_name = tk.Label(frame, text="Nome do Usuário")
    lbl_user_name.grid(row=6, column=0)
    entry_user_name = tk.Entry(frame)
    entry_user_name.grid(row=6, column=1)

    btn_insert_user = tk.Button(frame, text="Adicionar Usuário", command=insert_user_gui)
    btn_insert_user.grid(row=7, column=1)

    # Botão para Listar Usuários
    btn_list_users = tk.Button(frame, text="Listar Usuários", command=list_users)
    btn_list_users.grid(row=8, column=1)

    # Labels e Entradas para Empréstimos
    lbl_loan_book_id = tk.Label(frame, text="ID do Livro")
    lbl_loan_book_id.grid(row=9, column=0)
    entry_loan_book_id = tk.Entry(frame)
    entry_loan_book_id.grid(row=9, column=1)

    lbl_loan_user_id = tk.Label(frame, text="ID do Usuário")
    lbl_loan_user_id.grid(row=10, column=0)
    entry_loan_user_id = tk.Entry(frame)
    entry_loan_user_id.grid(row=10, column=1)

    lbl_loan_date = tk.Label(frame, text="Data de Empréstimo")
    lbl_loan_date.grid(row=11, column=0)
    entry_loan_date = tk.Entry(frame)
    entry_loan_date.grid(row=11, column=1)

    btn_insert_loan = tk.Button(frame, text="Realizar Empréstimo", command=insert_loan_gui)
    btn_insert_loan.grid(row=12, column=1)

    # Botão para Listar Empréstimos
    btn_list_loans = tk.Button(frame, text="Listar Empréstimos", command=list_loans)
    btn_list_loans.grid(row=13, column=1)

    root.mainloop()

else:
    print("Ambiente não suporta interface gráfica Tkinter. Tente executar localmente.")
